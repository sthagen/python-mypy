[case testNativeCallsUsedInDispatchFunction]
from functools import singledispatch
@singledispatch
def f(arg) -> bool:
    return False

@f.register
def g(arg: int) -> bool:
    return True
[out]
def __mypyc_singledispatch_main_function_f__(arg):
    arg :: object
L0:
    return 0
def f_obj.__init__(__mypyc_self__):
    __mypyc_self__ :: __main__.f_obj
    r0 :: dict
    r1 :: bool
L0:
    r0 = PyDict_New()
    __mypyc_self__.registry = r0; r1 = is_error
    return 1
def f_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    return r2
def f_obj.register(__mypyc_self__, cls, func):
    __mypyc_self__ :: __main__.f_obj
    cls, func, r0 :: object
L0:
    r0 = CPySingledispatch_RegisterFunction(__mypyc_self__, cls, func)
    return r0
def f_obj.__call__(__mypyc_self__, arg):
    __mypyc_self__ :: __main__.f_obj
    arg :: object
    r0 :: dict
    r1 :: str
    r2 :: object
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: object
    r8 :: ptr
    r9, r10, r11 :: object
    r12 :: ptr
    r13 :: object
    r14 :: bit
    r15 :: int
    r16 :: bit
    r17 :: int
    r18 :: bool
    r19 :: object
    r20 :: bool
L0:
    r0 = __main__.globals :: static
    r1 = 'f'
    r2 = CPyDict_GetItem(r0, r1)
    r3 = 'registry'
    r4 = CPyObject_GetAttr(r2, r3)
    r5 = functools :: module
    r6 = '_find_impl'
    r7 = CPyObject_GetAttr(r5, r6)
    r8 = get_element_ptr arg ob_type :: PyObject
    r9 = load_mem r8 :: builtins.object*
    keep_alive arg
    r10 = PyObject_CallFunctionObjArgs(r7, r9, r4, 0)
    r11 = load_address PyLong_Type
    r12 = get_element_ptr r10 ob_type :: PyObject
    r13 = load_mem r12 :: builtins.object*
    keep_alive r10
    r14 = r13 == r11
    if r14 goto L1 else goto L4 :: bool
L1:
    r15 = unbox(int, r10)
    r16 = r15 == 0
    if r16 goto L2 else goto L3 :: bool
L2:
    r17 = unbox(int, arg)
    r18 = g(r17)
    return r18
L3:
    unreachable
L4:
    r19 = PyObject_CallFunctionObjArgs(r10, arg, 0)
    r20 = unbox(bool, r19)
    return r20
def g(arg):
    arg :: int
L0:
    return 1


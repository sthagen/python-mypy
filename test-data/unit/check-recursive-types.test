-- Tests checking that basic functionality works

[case testRecursiveAliasBasic]
# flags: --enable-recursive-aliases
from typing import Dict, List, Union, TypeVar, Sequence

JSON = Union[str, List[JSON], Dict[str, JSON]]

x: JSON = ["foo", {"bar": "baz"}]

reveal_type(x)  # N: Revealed type is "Union[builtins.str, builtins.list[...], builtins.dict[builtins.str, ...]]"
if isinstance(x, list):
    x = x[0]

class Bad: ...
x = ["foo", {"bar": [Bad()]}]  # E: List item 0 has incompatible type "Bad"; expected "Union[str, List[JSON], Dict[str, JSON]]"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasBasicGenericSubtype]
# flags: --enable-recursive-aliases
from typing import Union, TypeVar, Sequence, List

T = TypeVar("T")

Nested = Sequence[Union[T, Nested[T]]]

class Bad: ...
x: Nested[int]
y: Nested[Bad]
x = y  # E: Incompatible types in assignment (expression has type "Nested[Bad]", variable has type "Nested[int]")

NestedOther = Sequence[Union[T, Nested[T]]]

xx: Nested[int]
yy: NestedOther[bool]
xx = yy  # OK
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasBasicGenericInference]
# flags: --enable-recursive-aliases
from typing import Union, TypeVar, Sequence, List

T = TypeVar("T")

Nested = Sequence[Union[T, Nested[T]]]

def flatten(arg: Nested[T]) -> List[T]:
    res: List[T] = []
    for item in arg:
        if isinstance(item, Sequence):
            res.extend(flatten(item))
        else:
            res.append(item)
    return res

reveal_type(flatten([1, [2, [3]]]))  # N: Revealed type is "builtins.list[builtins.int]"

class Bad: ...
x: Nested[int] = [1, [2, [3]]]
x = [1, [Bad()]]  # E: List item 0 has incompatible type "Bad"; expected "Union[int, Nested[int]]"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasGenericInferenceNested]
# flags: --enable-recursive-aliases
from typing import Union, TypeVar, Sequence, List

T = TypeVar("T")
class A: ...
class B(A): ...

Nested = Sequence[Union[T, Nested[T]]]

def flatten(arg: Nested[T]) -> List[T]: ...
reveal_type(flatten([[B(), B()]]))  # N: Revealed type is "builtins.list[__main__.B]"
reveal_type(flatten([[[[B()]]]]))  # N: Revealed type is "builtins.list[__main__.B]"
reveal_type(flatten([[B(), [[B()]]]]))  # N: Revealed type is "builtins.list[__main__.B]"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasNewStyleSupported]
# flags: --enable-recursive-aliases
from test import A

x: A
if isinstance(x, list):
    reveal_type(x[0])  # N: Revealed type is "Union[builtins.int, builtins.list[Union[builtins.int, builtins.list[...]]]]"
else:
    reveal_type(x)  # N: Revealed type is "builtins.int"

[file test.pyi]
A = int | list[A]
[builtins fixtures/isinstancelist.pyi]

-- Tests duplicating some existing tests with recursive aliases enabled

[case testRecursiveAliasesMutual]
# flags: --enable-recursive-aliases
from typing import Type, Callable, Union

A = Union[B, int]
B = Callable[[C], int]
C = Type[A]
x: A
reveal_type(x)  # N: Revealed type is "Union[def (Union[Type[def (...) -> builtins.int], Type[builtins.int]]) -> builtins.int, builtins.int]"

[case testRecursiveAliasesProhibited-skip]
# flags: --enable-recursive-aliases
from typing import Type, Callable, Union

A = Union[B, int]
B = Union[A, int]
C = Type[C]

[case testRecursiveAliasImported]
# flags: --enable-recursive-aliases
import lib
x: lib.A
reveal_type(x)  # N: Revealed type is "builtins.list[builtins.list[...]]"

[file lib.pyi]
from typing import List
from other import B
A = List[B]

[file other.pyi]
from typing import List
from lib import A
B = List[A]
[builtins fixtures/list.pyi]

[case testRecursiveAliasViaBaseClass]
# flags: --enable-recursive-aliases
from typing import List

x: B
B = List[C]
class C(B): pass

reveal_type(x)  # N: Revealed type is "builtins.list[__main__.C]"
reveal_type(x[0][0])  # N: Revealed type is "__main__.C"
[builtins fixtures/list.pyi]

[case testRecursiveAliasViaBaseClass2]
# flags: --enable-recursive-aliases
from typing import NewType, List

x: D
reveal_type(x[0][0])  # N: Revealed type is "__main__.C"

D = List[C]
C = NewType('C', B)

class B(D):
    pass
[builtins fixtures/list.pyi]

[case testRecursiveAliasViaBaseClass3]
# flags: --enable-recursive-aliases
from typing import List, Generic, TypeVar, NamedTuple
T = TypeVar('T')

class C(A, B):
    pass
class G(Generic[T]): pass
A = G[C]
class B(NamedTuple):
    x: int

y: C
reveal_type(y.x)  # N: Revealed type is "builtins.int"
reveal_type(y[0])  # N: Revealed type is "builtins.int"
x: A
reveal_type(x)  # N: Revealed type is "__main__.G[Tuple[builtins.int, fallback=__main__.C]]"
[builtins fixtures/list.pyi]

[case testRecursiveAliasViaBaseClassImported]
# flags: --enable-recursive-aliases
import a
[file a.py]
from typing import List
from b import D

def f(x: B) -> List[B]: ...
B = List[C]
class C(B): pass

[file b.py]
from a import f
class D: ...
reveal_type(f)  # N: Revealed type is "def (x: builtins.list[a.C]) -> builtins.list[builtins.list[a.C]]"
[builtins fixtures/list.pyi]

[case testRecursiveAliasViaNamedTuple]
# flags: --enable-recursive-aliases
from typing import List, NamedTuple, Union

Exp = Union['A', 'B']
class A(NamedTuple('A', [('attr', List[Exp])])): pass
class B(NamedTuple('B', [('val', object)])): pass

def my_eval(exp: Exp) -> int:
    reveal_type(exp) # N: Revealed type is "Union[Tuple[builtins.list[...], fallback=__main__.A], Tuple[builtins.object, fallback=__main__.B]]"
    if isinstance(exp, A):
        my_eval(exp[0][0])
        return my_eval(exp.attr[0])
    if isinstance(exp, B):
        return exp.val  # E: Incompatible return value type (got "object", expected "int")
    return 0

my_eval(A([B(1), B(2)]))
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasesSimplifiedUnion]
# flags: --enable-recursive-aliases
from typing import Sequence, TypeVar, Union

class A: ...
class B(A): ...

NestedA = Sequence[Union[A, NestedA]]
NestedB = Sequence[Union[B, NestedB]]
a: NestedA
b: NestedB

T = TypeVar("T")
S = TypeVar("S")
def union(a: T, b: S) -> Union[T, S]: ...

x: int
y = union(a, b)
x = y  # E: Incompatible types in assignment (expression has type "Sequence[Union[A, NestedA]]", variable has type "int")
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasesJoins]
# flags: --enable-recursive-aliases
from typing import Sequence, TypeVar, Union

class A: ...
class B(A): ...

NestedA = Sequence[Union[A, NestedA]]
NestedB = Sequence[Union[B, NestedB]]
a: NestedA
b: NestedB
la: Sequence[Sequence[A]]
lb: Sequence[Sequence[B]]

T = TypeVar("T")
def join(a: T, b: T) -> T: ...
x: int

y1 = join(a, b)
x = y1  # E: Incompatible types in assignment (expression has type "Sequence[Union[A, NestedA]]", variable has type "int")
y2 = join(a, lb)
x = y2  # E: Incompatible types in assignment (expression has type "Sequence[Union[A, NestedA]]", variable has type "int")
y3 = join(la, b)
x = y3  # E: Incompatible types in assignment (expression has type "Sequence[Union[Sequence[A], B, NestedB]]", variable has type "int")
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasesRestrictions]
# flags: --enable-recursive-aliases
from typing import Sequence, Mapping, Union

A = Sequence[Union[int, A]]
B = Mapping[int, Union[int, B]]

x: int
y: Union[A, B]
if isinstance(y, Sequence):
    x = y  # E: Incompatible types in assignment (expression has type "Sequence[Union[int, A]]", variable has type "int")
else:
    x = y  # E: Incompatible types in assignment (expression has type "Mapping[int, Union[int, B]]", variable has type "int")
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasesRestrictions2]
# flags: --enable-recursive-aliases
from typing import Sequence, Union

class A: ...
class B(A): ...

NestedA = Sequence[Union[A, NestedA]]
NestedB = Sequence[Union[B, NestedB]]

a: NestedA
b: NestedB
aa: NestedA

x: int
x = a  # E: Incompatible types in assignment (expression has type "NestedA", variable has type "int")
a = b
x = a  # E: Incompatible types in assignment (expression has type "Sequence[Union[B, NestedB]]", variable has type "int")
b = aa  # E: Incompatible types in assignment (expression has type "NestedA", variable has type "NestedB")
if isinstance(b[0], Sequence):
    a = b[0]
    x = a  # E: Incompatible types in assignment (expression has type "Sequence[Union[B, NestedB]]", variable has type "int")
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasWithRecursiveInstance]
# flags: --enable-recursive-aliases
from typing import Sequence, Union, TypeVar

class A: ...
T = TypeVar("T")
Nested = Sequence[Union[T, Nested[T]]]
class B(Sequence[B]): ...

a: Nested[A]
aa: Nested[A]
b: B
a = b  # OK
a = [[b]]  # OK
b = aa  # E: Incompatible types in assignment (expression has type "Nested[A]", variable has type "B")

def join(a: T, b: T) -> T: ...
reveal_type(join(a, b))  # N: Revealed type is "typing.Sequence[Union[__main__.A, typing.Sequence[Union[__main__.A, ...]]]]"
reveal_type(join(b, a))  # N: Revealed type is "typing.Sequence[Union[__main__.A, typing.Sequence[Union[__main__.A, ...]]]]"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasWithRecursiveInstanceInference]
# flags: --enable-recursive-aliases
from typing import Sequence, Union, TypeVar, List

T = TypeVar("T")
Nested = Sequence[Union[T, Nested[T]]]
class B(Sequence[B]): ...

nb: Nested[B] = [B(), [B(), [B()]]]
lb: List[B]

def foo(x: Nested[T]) -> T: ...
reveal_type(foo(lb))  # N: Revealed type is "__main__.B"
reveal_type(foo([B(), [B(), [B()]]]))  # N: Revealed type is "__main__.B"

NestedInv = List[Union[T, NestedInv[T]]]
nib: NestedInv[B] = [B(), [B(), [B()]]]
def bar(x: NestedInv[T]) -> T: ...
reveal_type(bar(nib))  # N: Revealed type is "__main__.B"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasTopUnion]
# flags: --enable-recursive-aliases
from typing import Sequence, Union, TypeVar, List

class A: ...
class B(A): ...

T = TypeVar("T")
PlainNested = Union[T, Sequence[PlainNested[T]]]

x: PlainNested[A]
y: PlainNested[B] = [B(), [B(), [B()]]]
x = y  # OK

xx: PlainNested[B]
yy: PlainNested[A]
xx = yy  # E: Incompatible types in assignment (expression has type "PlainNested[A]", variable has type "PlainNested[B]")

def foo(arg: PlainNested[T]) -> T: ...
lb: List[B]
reveal_type(foo([B(), [B(), [B()]]]))  # N: Revealed type is "__main__.B"
reveal_type(foo(lb))  # N: Revealed type is "__main__.B"
reveal_type(foo(xx))  # N: Revealed type is "__main__.B"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasInferenceExplicitNonRecursive]
# flags: --enable-recursive-aliases
from typing import Sequence, Union, TypeVar, List

T = TypeVar("T")
Nested = Sequence[Union[T, Nested[T]]]
PlainNested = Union[T, Sequence[PlainNested[T]]]

def foo(x: Nested[T]) -> T: ...
def bar(x: PlainNested[T]) -> T: ...

class A: ...
a: A
la: List[A]
lla: List[Union[A, List[A]]]
llla: List[Union[A, List[Union[A, List[A]]]]]

reveal_type(foo(la))  # N: Revealed type is "__main__.A"
reveal_type(foo(lla))  # N: Revealed type is "__main__.A"
reveal_type(foo(llla))  # N: Revealed type is "__main__.A"

reveal_type(bar(a))  # N: Revealed type is "__main__.A"
reveal_type(bar(la))  # N: Revealed type is "__main__.A"
reveal_type(bar(lla))  # N: Revealed type is "__main__.A"
reveal_type(bar(llla))  # N: Revealed type is "__main__.A"
[builtins fixtures/isinstancelist.pyi]

[case testRecursiveAliasesWithOptional]
# flags: --enable-recursive-aliases
from typing import Optional, Sequence

A = Sequence[Optional[A]]
x: A
y: str = x[0]  # E: Incompatible types in assignment (expression has type "Optional[A]", variable has type "str")

[case testRecursiveAliasesProhibitBadAliases]
# flags: --enable-recursive-aliases
from typing import Union, Type, List, TypeVar

NR = List[int]
NR2 = Union[NR, NR]
NR3 = Union[NR, Union[NR2, NR2]]

A = Union[B, int]  # E: Invalid recursive alias: a union item of itself
B = Union[int, A]  # E: Invalid recursive alias: a union item of itself
def f() -> A: ...
reveal_type(f())  # N: Revealed type is "Union[Any, builtins.int]"

T = TypeVar("T")
G = Union[T, G[T]]  # E: Invalid recursive alias: a union item of itself
def g() -> G[int]: ...
reveal_type(g())  # N: Revealed type is "Any"

def local() -> None:
    L = List[Union[int, L]]  # E: Cannot resolve name "L" (possible cyclic definition) \
                             # N: Recursive types are not allowed at function scope
    x: L
    reveal_type(x)  # N: Revealed type is "builtins.list[Union[builtins.int, Any]]"

S = Type[S]  # E: Type[...] cannot contain another Type[...]
U = Type[Union[int, U]]  # E: Type[...] cannot contain another Type[...]
x: U
reveal_type(x)  # N: Revealed type is "Type[Any]"
[builtins fixtures/isinstancelist.pyi]
